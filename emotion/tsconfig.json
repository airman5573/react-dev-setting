{
  "compilerOptions": {
    "target": "esnext", // default : es3
    // 몇 버전의 ECMAScript로 컴파일할것인지 지정합니다.
    // 예를들어, 'es5'로 지정하면 화살표 함수를 함수선언식으로 변경합니다.
    // esnext로 지정하면 현재 프로젝트에서 사용하는 typescript버전이
    // 지원하는 가장 높은 ECMAScript 버전을 알아서 선택합니다

    "allowJs": true,
    // js파일도 ts파일에서 import할 수 있습니다

    "skipLibCheck": true,
    // 외부 라이브러리에 명시된 타입에 대한 검사를 진행하지 않습니다.
    // 다만, 우리가 외부 라이브러리에서 사용한 코드에 대해서는 검사를 해줍니다.
    // 주로 이 옵션을 true로 해주는 경우는 3가지가 있습니다
    // - 첫째 -
    // 타입스크립트가 외부 라이브러리까지 전부 타입체크를 하면 너무 오래걸립니다.
    // 그래서 컴파일 속도를 높일때 사용합니다.
    // - 둘째 -
    // 외부 라이브러리의 타입에 문제가 있을때 이 옵션을 키면
    // 그냥 any로 해석해줍니다.
    // - 셋째 -
    // 외부 라이브러리에서 사용한 TS버전과 지금 내 프로젝트에서 사용하고 있는 TS버전이
    // 다른 경우에, 이 옵션을 키면 에러를 안뿜습니다.
    // 그리고 외부 라이브러리에서 타입 체크를 덜 엄격하게 하기로 하고 any를 썼는데
    // 내 프로젝트에서는 타입을 업격하게 하기로 설정 했다면, 이 설정의 차이에서 오는 오류들을
    // 무시할 수 있도록 해줍니다.

    "allowSyntheticDefaultImports": true,

    "jsx": "preserve",

    "jsxImportSource": "@emotion/react",

    "strict": true,
    // strict로 시작하는 옵션들을 true로 해줍니다.
    // strictFunctionTypes, strictNullChecks같은 옵션들이 true로 됩니다.

    "forceConsistentCasingInFileNames": true,
    // import할때 파일명을 대소문자도 고려해서 똑같이 적어줘야 합니다

    "moduleResolution": "node",
    // module 찾는 방식을 지정합니다.
    // 자세한 내용은 https://www.typescriptlang.org/docs/handbook/module-resolution.html#module-resolution-strategies
    // 요기를 보면 나와있습니다.

    "isolatedModules": true,
    // 하나의 파일이 독립된 모듈로 되기를 강제합니다
    // 여기서 독립된 모듈이란 import나 export가 파일안에 꼭 있어야 한다는 의미입니다
    // 이것은 babel같은 외부 컴파일러를 위한 옵션이라고는 하는데, 이것이 무엇을 의미하는지는 모르겠습니다.

    "noEmit": true,
    // 타입체크만 하고 js로 컴파일 하지 않습니다
    // 현재 babel을 사용해서 컴파일 할것이기 때문에 true로 설정해 줍시다

    "resolveJsonModule": true,
    // json파일도 모듈로 취급해서 import할 수 있게 합니다

    "baseUrl": "./src",
    // import something from './src/some/thing.ts' 이렇게 안하고
    // import something from 'some/thing.ts' 이렇게 해도 잘 작동하도록 합니다.
    // 즉, 번거롭게 앞에 path를 계속 적어줘야 하는 불편함을 줄여줍니다.

    "paths": {
      "@components/*": ["components/*"]
    }
  },

  "include": ["src"]
  // ts가 인식하고 컴파일할 파일의 경로를 지정합니다.
  // 현재 src폴더만 ts를 사용할것이기 때문에, src를 넣어줍니다.
}
