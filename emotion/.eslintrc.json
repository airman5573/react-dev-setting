{
  "env": {
    "browser": true, // browser에서 사용하는 전역 기능(변수, 함수, 객체)를 인식한다
    "es2022": true // ECMAScript 2022와 그 하위에서 지원하는 기능들을 인식한다
  },
  "settings": {
    // plugin 세팅
    "react": {
      // eslint-plugin-react의 설정이다
      "version": "detect" // react version을 현재 프로젝트에서 사용하는 version을 알아서 찾아서 지정한다
    },
    "import/resolver": {
      // eslint-plugin-import의 설정이다
      "typescript": {
        // eslint-import-resolver-typescript 설정이다
        "project": "frontend/tsconfig.json" // tsconfig의 위치를 지정한다
      }
    }
  },
  "parser": "@typescript-eslint/parser", // parser는 ts parser를 활용한다
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true // jsx를 lint가 인식하도록 한다
    },
    "ecmaVersion": "latest",
    // 사실 위에서 env.es2022 = true로 했기 때문에, 알아서 최신 ecmaVersion을 사용한다
    // 지금은 필요 없는 옵션이다. 하지만 공부용으로 냅두자!
    "sourceType": "module"
    // ESLint의 Parser가 분석하려는 JS file이 script가 아닌 module이라는것을 명시한다
  },
  "extends": [
    "plugin:jsx-a11y/recommended", // 웹 접근성을 준수하여 jsx를 작성했는지 검사한다
    "plugin:react/recommended", // react관련 rule을 적용한다
    "plugin:react/jsx-runtime", // jsx관련 rule을 off시킨다
    "plugin:react-hooks/recommended", // react-hook관련 rule을 적용한다
    "plugin:import/recommended", // import관련 rule을 적용한다
    "plugin:import/typescript", // typescript import관련 rule을 적용한다
    "plugin:storybook/recommended", // storybook 관련 rule을 적용한다
    "plugin:prettier/recommended", // .prettierrc.json에 기입한 prettier rule을 eslint rule로 적용한다
    "plugin:@typescript-eslint/recommended" // typescript관련 rule을 적용한다
  ],
  "rules": {
    "import/extensions": [
      "error", // 이 규칙을 지키지 않으면 error로 간주하겠다
      "ignorePackages", // pacakge빼고는 모두 import할때 확장자명을 작성 해라!
      {
        "ts": "never", // ts는 확장자명 사용하지 않는다
        "tsx": "never", // tsx도 절대!
        "js": "never", // js도!
        "jsx": "never" // jsx 마저도!
      }
    ],
    "react/prop-types": "off" // typescript를 사용 하니까 prop-types안써도 될듯 싶다
  }
}
